{"version":3,"sources":["reducers/coupon-reducer.js","actions/action-types.js","reducers/index.js","store.js","Test.jsx","ecwidConfig.js","serviceWorker.js","index.js"],"names":["initialState","selectedCoupon","coupons","isCouponsLoaded","isCouponsLoading","print","aplication","ready","modal","show","storeLang","currency","couponReducer","state","arguments","length","undefined","action","type","Object","objectSpread","uniqCoupons","R","a","b","name","id","toConsumableArray","concat","payload","items","total","count","reducers","combineReducers","store","createStore","applyMiddleware","thunk","promiseMiddleware","Test","react_default","createElement","EcwidApp","window","init","app_id","autoloadedflag","autoheight","storeData","getPayload","store_id","access_token","Boolean","location","hostname","match","i18n","use","Backend","reactI18nextModule","fallbackLng","debug","backend","loadPath","interpolation","escapeValue","react","wait","CouponManager","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","es","React","Component","ReactDOM","render","src_CouponManager","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef98a94f.chunk.js","sourcesContent":["import * as types from \"../actions/action-types\";\nimport * as R from \"ramda\";\n\nconst initialState = {\n  selectedCoupon: \"\",\n  coupons: [],\n  isCouponsLoaded: true,\n  isCouponsLoading: false,\n  print: false,\n  aplication: {\n    ready: false\n  },\n  modal: {\n    show: false\n  },\n  storeLang: \"\",\n  currency: \"\"\n};\n\nconst couponReducer = function(state = initialState, action) {\n  switch (action.type) {\n    case types.GET_INIT_COUPONS_FROM_BASE:\n      return { ...state, isCouponsLoading: true };\n    case types.GET_COUPONS_FROM_BASE:\n      const uniqCoupons = R.uniqWith(\n        (a, b) => {\n          return a.name === b.name && a.id === b.id;\n        },\n        [...state.coupons, ...action.payload.items]\n      );\n      // debugger; //eslint-disable-line\n      return {\n        ...state,\n        coupons: uniqCoupons,\n        isCouponsLoaded:\n          action.payload.total ===\n            [...state.coupons, ...action.payload.items].length ||\n          action.payload.count === 0,\n        isCouponsLoading: false,\n        total: action.payload.total\n      };\n\n    case types.OPEN_COPY_MODAL:\n      return { ...state, modal: { show: action.payload } };\n\n    case types.CLOSE_COPY_MODAL:\n      return { ...state, modal: { show: action.payload } };\n\n    case types.SET_APP_READY:\n      return { ...state, aplication: { ready: action.payload } };\n\n    case types.SET_ACTIVE_COUPON:\n      return { ...state, selectedCoupon: action.payload };\n    case types.GET_STORE_LANG:\n      return { ...state, storeLang: action.payload };\n    case types.SHOW_PRINT:\n      return { ...state, print: true };\n    case types.HIDE_PRINT:\n      return { ...state, print: false };\n\n    default:\n      return state;\n  }\n};\n\nexport default couponReducer;\n","export const SET_APP_READY = \"SET_APP_READY\";\n\nexport const GET_COUPONS_FROM_BASE = \"GET_COUPONS_FROM_BASE\";\nexport const GET_INIT_COUPONS_FROM_BASE = \"GET_INIT_COUPONS_FROM_BASE\";\nexport const SET_ACTIVE_COUPON = \"SET_ACTIVE_COUPON\";\n\nexport const OPEN_COPY_MODAL = \"OPEN_COPY_MODAL\";\nexport const CLOSE_COPY_MODAL = \"CLOSE_COPY_MODAL\";\n\nexport const GET_STORE_LANG = \"GET_STORE_LANG\";\nexport const GET_CURRENCY = \"GET_CURRENCY\";\n\nexport const SHOW_PRINT = \"SHOW_PRINT\";\nexport const HIDE_PRINT = \"HIDE_PRINT\";\n","import { combineReducers } from \"redux\";\n// Reducers\nimport couponReducer from \"./coupon-reducer\";\n// Combine Reducers\nvar reducers = combineReducers({\n  couponReducer\n});\nexport default reducers;\n","import { createStore, applyMiddleware } from \"redux\";\n// import { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers/index.js\";\nimport promiseMiddleware from \"redux-promise\";\n\n// const logger = createLogger();\n\nconst deVstore = createStore(\n  reducers,\n  applyMiddleware(thunk, promiseMiddleware)\n);\nconst prodStore = createStore(\n  reducers,\n  applyMiddleware(thunk, promiseMiddleware)\n);\n\nconst store = process.env.NODE_ENV === \"production\" ? prodStore : deVstore;\n\nexport default store;\n","import React from \"react\";\n\nexport default function() {\n  return <h1>TEST COMPONENT</h1>;\n}\n","const EcwidApp = window.EcwidApp;\n// Initialize the application\nEcwidApp.init({\n  // app_id: \"coupon-generator\", // use your application namespace\n  app_id: \"multiple-coupons-dev\", // for dev\n  autoloadedflag: true,\n  autoheight: true\n});\n\n\nconst storeData = EcwidApp.getPayload();\nexport const storeId = storeData.store_id;\nexport const accessToken = storeData.access_token;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport store from \"./store\";\n// import App from \"./App.jsx\";\nimport Test from './Test';\nimport \"./ecwidConfig\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport i18n from \"i18next\";\nimport { withI18n, reactI18nextModule } from \"react-i18next\";\nimport Backend from \"i18next-xhr-backend\";\n\ni18n\n  .use(Backend)\n  .use(reactI18nextModule)\n  .init({\n    fallbackLng: \"en\",\n    debug: true,\n    backend: {\n      loadPath: `locales/{{lng}}/{{ns}}.json`\n    },\n    interpolation: {\n      escapeValue: false // not needed for react as it escapes by default\n    },\n    react: {\n      wait: true\n    }\n  });\n\nclass CouponManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <Test />\n      </Provider>\n    );\n  }\n}\nReactDOM.render(<CouponManager />, document.getElementById(\"root\"));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}